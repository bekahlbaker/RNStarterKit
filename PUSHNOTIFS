import React, { Component } from 'react';
import { Platform, StyleSheet, Text, View, AppState } from 'react-native';
import  NotificationsIOS, { NotificationsAndroid } from 'react-native-notifications';


const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' +
    'Cmd+D or shake for dev menu',
  android: 'Double tap R on your keyboard to reload,\n' +
    'Shake or press menu button for dev menu',
});

export default class App extends Component<{}> {

constructor() {
  super();
    if (Platform.OS == 'ios') {
      NotificationsIOS.addEventListener('remoteNotificationsRegistered', this.onPushRegistered.bind(this));
      NotificationsIOS.addEventListener('remoteNotificationsRegistrationFailed', this.onPushRegistrationFailed.bind(this));
      NotificationsIOS.requestPermissions();
    } else {
      // On Android, we allow for only one (global) listener per each event type.
      NotificationsAndroid.setRegistrationTokenUpdateListener((deviceToken) => {
        console.log('Push-notifications registered!', deviceToken)
      });
      // On Android, we allow for only one (global) listener per each event type.
      NotificationsAndroid.setNotificationReceivedListener((notification) => {
        console.log("Notification received on device", notification.getData());
      });
      NotificationsAndroid.setNotificationOpenedListener((notification) => {
        console.log("Notification opened by device user", notification.getData());
      });
  }

  this.handleAppStateChange = this.handleAppStateChange.bind(this);
}

onPushRegistered(deviceToken) {
  console.log("Device Token Received", deviceToken);
}

onPushRegistrationFailed(error) {
  console.error('ON PUSH REG FAILED', error);
}

componentWillMount() {
  AppState.addEventListener('change', this.handleAppStateChange);
}

componentWillUnmount() {
  AppState.removeEventListener('change', this.handleAppStateChange)
  NotificationsIOS.addEventListener('notificationReceivedBackground', this.onNotificationReceivedBackground.bind(this));
  NotificationsIOS.removeEventListener('remoteNotificationsRegistered', this.onPushRegistered.bind(this));
  NotificationsIOS.removeEventListener('remoteNotificationsRegistrationFailed', this.onPushRegistrationFailed.bind(this));
  }

  onNotificationReceivedBackground(notification) {
    NotificationsIOS.log("Notification Received Background: " + JSON.stringify(notification));

    NotificationsIOS.localNotification({
      alertBody: "Received background notificiation!",
      alertTitle: "Local Notification Title",
      userInfo: notification.getData()
    });
  }

  handleAppStateChange(appState) {
    console.log('APP STATE', AppState.currentState);
      if (appState === 'background') {

        NotificationsAndroid.localNotification({
          title: "Local notification",
          body: "This notification was generated by the app!",
          extra: "data"
        });
      }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>
          Welcome to React Native!
        </Text>
        <Text style={styles.instructions}>
          To get started, edit App.js
        </Text>
        <Text style={styles.instructions}>
          {instructions}
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
